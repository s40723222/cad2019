var tipuesearch = {"pages": [{'title': 'Weeks', 'text': 'Weeks 2~5 \n Weeks 6~9 \n Weeks 10~14 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 \n Weeks 15~18 \n', 'tags': '', 'url': 'Weeks.html'}, {'title': 'Weeks 2~5', 'text': 'Week 2 \n 先下載 2019Fall可攜式套件.7z ，並解壓縮，道 github 網站建立新的repository，建立時要勾選Initialize this repository with a README，建立完成後將倉儲git clone下來。 輸入git config --global user.name""、git config --global user.email""、git config --global http.proxy [2001:288:6004:17::7]:3128。 輸入git submodule add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde，進入cmsimde\\up_dir資料夾裡面，將所有檔案抓出來cad2019資料夾裡。 開啟網站並修改標題後上傳到github倉儲裡。 \n Week 3 \n 用git version檢查git的版本 將Y:\\portablegit\\bin\\sh.exe改名成sh_rename_for_solvespace.exe 用git clone\xa0--recurse-submodules取得子模組 git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace edit Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt comment out line 713 and 714 #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() 手動進行libpng.dll.a的編譯，改名為 libpng_static.a放到編譯系統的lib目錄中。 cd solvespace、cd extlib、cd libpng、mkdir build、cd build cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make rename\xa0libpng.dll.a to libpng_static.a and copy to\xa0Y:\\msys64\\mingw64\\lib 在solvespace建造並進入build目錄，執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release、mingw32-make Solvespace 986da7d Solvespace.exe Solvespace 22e4011 \n Week 4 \n 觀看\xa0 solvespace tutorials \n Week 5 \n 用 solvespace 進行繪圖 \n \n', 'tags': '', 'url': 'Weeks 2~5.html'}, {'title': 'Weeks 6~9', 'text': 'Week 6 \n 用繪圖軟體 Solvespace 編譯，零組件繪圖 \n \n 將零組件轉入 v-rep3\xa0進行運動組立後，以 Lua 或 Python 進行控制。 \n \n Week7 \n slovespace-1 \n \n slovespace-2 \n \n solvespace-3 \n \n solvespace-4 \n \n solvespace-5 \n \n solvespace-6 \n \n Week8 \n 開啟 blog 開啟python，將leo打開 將 blog 的網址複製到\xa0@path . ./\xa0-->Pelican 設定-->遠端中 SITEURL 將底下的\xa0DISQUS_SITENAME\xa0改為自己的學號 在\xa0local_blog\xa0點選右鍵，點選goto script，將指令複製起來後，存儲 道 python 輸入指令，完成 \n 導入 webots 下載  webots_2019b_rev1.7z \xa0，並解壓縮至Y槽 將隨身系統中的 start_mdecourse.bat 複製一個並改名 start_webots.bat 打開編譯器，將 start_mdecourse.bat 指令複製到 start_webots.bat 輸入 \xa0 set path_webots=%Disk%:\\Webots_2019b_rev1\\msys64\\mingw64\\bin;%Disk%:\\Webots_2019b_rev1\\msys64\\usr\\bin \xa0 start Y:\\Webots_2019b_rev1\\msys64\\mingw64\\bin\\webots.exe 重新啟動後，極可使用 start_webots.bat 開啟webots \n ssh 對 github 的連線 將 Y:\\portablegit\\bin 下的 sh_for_solvespace_compile.exe 複製並重新命名為 sh.exe 將 python 打開並輸入 sh 在 Y:\\home_mdecourse 建立一個資料夾 .ssh 再打完 sh 的編輯器裡輸入 ssh-keygen -t rsa\xa0 -b 4096 -C "使用者學號" 下載  putty.7z \xa0放進Y槽裡並解壓縮 編譯 star_mdecourse.bat ，加入以下指令 set GIT_HOME=%Disk%:\\portablegit\\bin\\ set GIT_SSH=%Disk%:\\putty\\plink.exe 將倉儲的 .git 裡面 config 中的 url 改成 ssh 形式 將 python.exe ，設定 proxy 的路徑並存檔 在到 github 存入自己的 key ，就完成 ssh 對 github 的連線 \n', 'tags': '', 'url': 'Weeks 6~9.html'}, {'title': 'Weeks 10~14', 'text': '', 'tags': '', 'url': 'Weeks 10~14.html'}, {'title': 'Weeks 15~18', 'text': "Week15 \n \n Week17 \n Building the joints 建立關節 \n Now we will take care of the joints/motors.  Most of the time, we know the exact position and orientation of each of the joints.  In that case, we simply add the joints with [Menu bar --> Add --> Joints --> ...],  then we can change their position and orientation with the position dialog and orientation dialog.  In other situations, we only have the Denavit-Hartenberg (i.e. D-H) parameters.  In that case, we can build our joints via the tool model located in Models/tools/Denavit-Hartenberg joint creator.ttm,  in the model browser. Othertimes, we have no information about the joint locations and orientations.  Then, we need to extract them from the imported mesh. Let's suppose this is our case.  Instead of working on the modified, more approximate mesh, we open a new scene, and import the original CAD data again. Most of the time, we can extract meshes or primitive shapes from the original mesh.  The first step is to subdivide the original mesh. If that does not work, we do it via the triangle edit mode.  Let's suppose that we could divide the original mesh. We now have smaller objects that we can inspect.  We are looking for revolute shapes, that could be used as reference to create joints at their locations, with the same orientation.  First, remove all objects that are not needed. It is sometimes also useful to work across several opened scenes, for easier visualization/manipulation.  In our case, we focus first on the base of the robot: it contains a cylinder that has the correct position for the first joint.  In the triangle edit mode, we have: \n 現在，我們注意關節/馬達。 大多數時候，我們知道每個關節的確切位置和方向。 在這種情況，我們需使用[菜單欄->添加->關節-> ...]添加關節，然後可以用位置對話框和方向對話框更改它們的位置和方向。 在其他情況，我們只有Denavit-Hartenberg（即D-H）參數。 在這種情況，我們可以通過模型瀏覽器中位於Models / tools / Denavit-Hartenberg聯合creator.ttm中的工具模型來構建關節。 有時，我們沒有關於關節位置和方向的信息。然後，我們需要從導入的網格中提取它們。 讓我們假設這是我們的情況。無需處理修改過的，更近似的網格，而是打開一個新場景，然後再導入原始CAD數據。 大多數時候，我們可以從原始網格中提取網格或基本形狀。第一步是細分原始網格。 如果沒有用，我們通過三角形編輯模式進行操作。假設我們可劃分原始網格。 現在，我們可以檢查較小的對象。我們在尋找旋轉形狀，可以用作在其位置以相同方向創建關節的參考。 首先，刪除所有不需要的對象。 有時在多個打開的場景中工作也很有用，以便於可視化/操作。 在我們的案例中，我們首先關注機器人的基座：它包含一個圓柱體，該圓柱體的第一個關節的位置正確。 在三角形編輯模式下，我們有： \n [Robot base: normal and triangle edit mode visualization] [機器人基礎：法線和三角形編輯模式可視化] \n We change the camera view via the page selector toolbar button, in order to look at the object from the side.  The fit-to-view toolbar button can come in handy to correctly frame the object in edition.  Then we switch to the vertex edit mode and select all vertices that belong to the upper disc.  Remember that by switching some layers on/off, we can hide other objects in the scene.  Then we switch back to the triangle edit mode: \n 我們通過頁面選擇器工具欄按鈕更改相機視圖，以便從側面查看對象。  適合查看的工具欄按鈕可以派上用場，以正確構圖版本中的對象。  然後，我們切換到頂點編輯模式，並選擇屬於上光盤的所有頂點。  記得，通過打開/關閉某些層，我們可以隱藏場景中的其他對象。  然後我們切換回三角形編輯模式： \n [Selected upper disc, vertex edit mode (1 & 2), triangle edit mode (3)] [選擇的上光盤，頂點編輯模式（1和2），三角形編輯模式（3）] \n Now we click Extract cylinder (Extract shape would also work in that case),  this just created a cylinder shape in the scene, based on the selected triangles.  We leave the edit mode and discard the changes.  Now we add a revolute joint with [Menu bar --> Add --> Joint --> Revolute], keep it selected, then control-select the extracted cylinder shape.  In the position dialog, on the position tab, we click Apply to selection: this basically copies the x/y/z position of the cylinder to the joint.  Both positions are now identical.  In the orientation dialog, on the orientation tab, we also click Apply to selection: the orientation of our selected objects is now also the same.  Sometimes, we will need to additionally rotate the joint about 90/180 degrees around its own reference frame in order to obtain the correct orientation or rotation direction. We could do that on the rotation tab of that dialog if needed (in that case, do not forget to click the Own frame button). In a similar way we could also shift the joint along its axis, or even do more complex operations.  This is what we have: \n 現在，我們點選 Extract cylinder (在這種情況下 Extract shape 也將起作用)。 這只是根據選定的三角形在場景中創建了圓柱體形狀。 我們離開編輯模式並放棄更改。 現在，通過[ Menu bar --> Add --> Joint --> Revolute ]添加旋轉關節，使其保持選中狀態，然後控制選擇提取的圓柱形狀。 然後控制選擇提取的圓柱形狀。 在位置對話框的 position 選項卡上，點選 Apply to selection ：這基本上將圓柱體的x / y / z位置複製到關節。 現在兩個位置都相同。 在方向對話框中的方向選項卡上，我們還點選 Apply to selection ：所選對象的方向現在也相同。 有時，我們將需要圍繞其自身的參考框架額外旋轉關節90/180度，以獲得正確的方向或旋轉方向。 如果需要，我們可以在該對話框的 rotation 選項卡上執行此操作（在這種情況下，請不要忘記點選 Own frame 按鈕）。 同樣，我們也可以沿關節的軸移動關節，甚至進行更複雜的操作。 這就是我們所擁有的。 \n \n [Joint in correct location, with the correct orientation] [在正確的位置，以正確的方向接合] \n Now we copy the joint back into our original scene, and save it (do not forget to save your work on a regular basis! The undo/redo function is useful, but doesn't protect you against other mishaps).  We repeat above procedure for all the joints in our robot, then rename them.  We also make all joints a little bit longer in the joint properties, in order to see them all.  By defaut, joints will be assigned to visibility layer 2, but can be changed in the object common properties.  We assign now all joints to visibility layer 10, then temporarily enable visibility layer 10 for the scene to also visualize those joints (by default, only visibility layers 1-8 are activated for the scene).  This is what we have (the model ResizableFloor_5_25 was temporarily made invisible in the model properties dialog): \n 現在，我們將關節複製回到原始場景中，並保存它（不要忘記定期保存您的工作！ undo/redo 功能很有用，但不能保護您免受其他不幸的影響）。 我們對機器人中的所有關節重複上述過程，然後重命名它們。 我們還將使所有關節的關節屬性稍長一些，以便查看所有關節。 通過默認，關節將分配給可見性層2，但可以在對象公共屬性中對其進行更改。 現在，我們將所有關節分配給可見性層10，然後為場景臨時啟用可見性層10，以使這些關節也可視化（默認情況下，僅激活場景的可見性層1-8）。 這就是我們所擁有的（模型 ResizableFloor_5_25 模型在模型屬性對話框中暫時不可見）: \n \n [Joints in correct configuration] [接頭配置正確] \n At this point, we could start to build the model hierarchy and finish the model definition. But if we want opur robot to be dynamically enabled, then there is an additional intermediate step: \n 至此，我們可以開始構建模型層次結構並完成模型定義。 但是，如果我們希望動態啟用 opur 機器人，則還有一個額外的中間步驟。 \n", 'tags': '', 'url': 'Weeks 15~18.html'}, {'title': 'Note', 'text': 'Solvespace 快捷鍵 \n \n \n \n \n D \n 長度設定 \n \n N \n 角度設定 \n \n \n \n H \n 水平限制 (左右疊合) \n \n V \n 垂直限制 (上下疊合) \n \n \n \n L \n 平行限制 (無交角) \n \n [ \n 垂直限制 (90°) \n \n \n \n O \n 重疊 (點在線上) \n \n Y \n 對稱中心點 \n \n \n \n Q \n 等長限制 \n \n X \n 物件平行 \n \n \n \n U \n \n 其他輔助角 \n \n \n E \n 切換參考尺寸 \n \n \n \n', 'tags': '', 'url': 'Note.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules\xa0 https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};